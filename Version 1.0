float ux = 200;
float uy = 575;
float ux2 = 0;
float uy2 = - 1000;
float ux3 = 0;
float uy3 = - 1000;
float ux4 = 0;
float uy4 = - 1000;
int r = 10;
int s = 50;
int z = 1;
int lives = 3;
float cw = 20;
float cs = -0.75;
int coins = 0;
float cx1;
float cy1;
float[] cx = new float[7];
float[] cy = new float[4];
float cx2;
float cy2;
float[] cxx = new float[17];
int rand = round(random(15));
float cx3;
float cy3;
float[] cxxx = new float[7];
int rand2 = round(random(5));
int m = -1000000;
// school is in session!
car c1 = new car(100, 360, color(70, 255, 70));
car c2 = new car(300, 360, color(70, 255, 70));
car c3 = new car(0, 410, color(255, 255, 100));
car c4 = new car(150, 410, color(255, 255, 100));
car c5 = new car(200, 460, color(100, 100, 255));
car c6 = new car(350, 460, color(100, 100, 255));
car c7 = new car(0, 510, color(255, 100, 100));
car c8 = new car(200, 510, color(255, 100, 100));
logg l1 = new logg(0, 110);
logg l2 = new logg(250, 210);
turtle4 t1 = new turtle4(0, 175);
turtle2 t3 = new turtle2(220, 175);
turtle2 t4 = new turtle2(340, 175);
turtle4 t2 = new turtle4(475, 275);
turtle2 t5 = new turtle2(695, 275);
turtle2 t6 = new turtle2(815, 275);
boolean inMode = true;
boolean easy = true;
boolean medium = false;
boolean hard = false;
boolean inGame = false;
boolean b = false;
boolean i1 = false;
boolean i2 = false;
boolean i3 = false;
boolean i4 = false;
boolean onl = false;
boolean ont = false;
boolean paused = false;
boolean won = false;
boolean dead = false;
boolean reset = false;
boolean gameOver = false;
PFont font = createFont("Monospaced", 80);

void modes() {
  noStroke();
  fill(0, 150, 0);
  rect(0, 0, width, height);
  fill(0);
  textFont(font, 40);
  textAlign(CENTER);
  text("CHOOSE", width/2, 90);
  text("MODE", width/2, 135);
  if (easy == true) {
    fill(255);
  } else {
    fill(0);
  }
  text("EASY", width/2, 230);
  if (medium == true) {
    fill(255);
  } else {
    fill(0);
  }
  text("MEDIUM", width/2, 310);
  if (hard == true) {
    fill(255);
  } else {
    fill(0);
  }
  text("HARD", width/2, 390);
  textSize(60);
  if (mouseX > 125 && mouseX < 275 && mouseY > 470 && mouseY < 525) {
    fill(255);
  } else {
    fill(0);
  }
  text("PLAY", width/2, 520);
}

void winning() {
  s = 0;
  fill(0);
  textFont(font);
  textAlign(CENTER);
  text("YOU WON!", width/2, 270);
  textSize(35);
  if (hard == false) {
    if (coins == 0) {
      text("NEXT TIME, TRY", width/2, 315);
      text("TO COLLECT COINS", width/2, 350);
    }
    if (coins == 1) {
      text("SERIOUSLY,", width/2, 315);
      text("DID YOU EVEN TRY", width/2, 350);
      text("TO COLLECT COINS?", width/2, 385);
    }
    if (coins == 2) {
      text("OK! YOU ARE", width/2, 315);
      text("AN AVERAGE FROG", width/2, 350);
    }
    if (coins == 3) {
      text("GOOD JOB! YOU", width/2, 315);
      text("ARE A RICH FROG", width/2, 350);
      text("#LIFESTYLE", width/2, 385);
    }
  } else {
    text("YOU ARE A", width/2, 315);
    text("GANGSTA FROG!", width/2, 350);
    text("#FROGINDAHOUSE", width/2, 385);
  }
  if (easy == true) {
    text("TRY MEDIUM MODE?", width/2, 430);
    if (mouseX > 75 && mouseX < 125 && mouseY > 450 && mouseY < 485) {
      fill(255);
    } else {
      fill(0);
    }
    text("NO", width/4, 480);
    if (mouseX > 265 && mouseX < 335 && mouseY > 450 && mouseY < 485) {
      fill(255);
    } else {
      fill(0);
    }
    text("YES", 3*width/4, 480);
  }
  if (medium == true) {
    text("TRY HARD MODE?", width/2, 430);
    if (mouseX > 75 && mouseX < 125 && mouseY > 450 && mouseY < 485) {
      fill(255);
    } else {
      fill(0);
    }
    text("NO", width/4, 480);
    if (mouseX > 265 && mouseX < 335 && mouseY > 450 && mouseY < 485) {
      fill(255);
    } else {
      fill(0);
    }
    text("YES", 3*width/4, 480);
  }
}

void death() {
  lives = lives - z;
  z = 0;
  if (lives > 0) {
    fill(0);
    textFont(font);
    textAlign(CENTER);
    text("YOU DIED", width/2, 270);
    textSize(35);
    text("PRESS SPACE", width/2, 315);
  }
}

void go() {
  fill(0);
  textFont(font, 60);
  textAlign(CENTER);
  text("GAME OVER", width/2, 270);
  textSize(35);
  text("PRESS SPACE", width/2, 315);
  text("TO RESTART", width/2, 350);
}

void r1() {
  s = 50;
  z = 1;
  ux = 200;
  uy = 575;
  onl = false;
  ont = false;
  dead = false;
  reset = true;
  l1.run();
  l2.run();
  t1.run();
  t3.run();
  t4.run();
  t2.run();
  t5.run();
  t6.run();
  c1.run();
  c2.run();
  c3.run();
  c4.run();
  c5.run();
  c6.run();
  c7.run();
  c8.run();
  reset = false;
}

void r2() {
  r1();
  cx1 = cx[round(random(6))];
  cy1 = cy[round(random(3))];
  rand = round(random(15));
  rand2 = round(random(5));
  lives = 3;
  coins = 0;
  ux2 = 0;
  uy2 = - 1000;
  ux3 = 0;
  uy3 = - 1000;
  ux4 = 0;
  uy4 = - 1000;
  i1 = false;
  i2 = false;
  i3 = false;
  i4 = false;
}

void setup() {
  size(400, 600);
  // coin 1
  for (int i = 0; i < 7; i++) {
    cx[i] = 50 + i*50;
  }
  for (int i = 0; i < 4; i++) {
    cy[i] = 375 + i*50;
  }
  cx1 = cx[round(random(6))];
  cy1 = cy[round(random(3))];
}

void draw() {
  background(255);
  smooth(1000);

  if (inMode == true) {
    modes();
  }

  if (inGame == true) {
    // water
    noStroke();
    fill(0, 0, 150);
    rect(0, 0, width, 25 + height/2);

    // road
    fill(150);
    rect(0, 50 + height/2, width, height/2 - 25);

    // safes
    fill(0, 150, 0);
    rect(0, 0, width, 50);
    rect(0, 50, 25, 50);
    rect(75, 50, 50, 50);
    rect(175, 50, 50, 50);
    rect(275, 50, 50, 50);
    rect(375, 50, 40, 50);
    rect(0, 300, width, 50);
    rect(0, height - 50, width, 50);
    // lily pads
    ellipse(50, 75, 30, 30);
    ellipse(150, 75, 30, 30);
    ellipse(250, 75, 30, 30);
    ellipse(350, 75, 30, 30);
    fill(0, 0, 150);
    triangle(50, 75, 65, 70, 60, 55);
    triangle(150, 75, 165, 70, 160, 55);
    triangle(250, 75, 265, 70, 260, 55);
    triangle(350, 75, 365, 70, 360, 55);

    // final safe
    fill(0, 180, 0);
    // frog 4
    stroke(220, 220, 0);
    strokeWeight(1);
    noFill();
    ellipse(ux4, uy4 + 3, 15, 20);
    noStroke();
    fill(0, 180, 0);
    ellipse(ux4, uy4, r*2, r*2);
    fill(20);
    ellipse(ux4, uy4 - 5, 15, 15);
    fill(0, 180, 0);
    rect(ux4 - 8, uy4 - 5, 16, 8);
    stroke(20);
    strokeWeight(2);
    line(ux4 - 13, uy4 - 5, ux4 + 7, uy4 - 5);
    noStroke();
    fill(20);
    ellipse(ux4 - 4, uy4 - 1, 8, 8);
    ellipse(ux4 + 4, uy4 - 1, 8, 8);
    fill(0, 180, 0);
    rect(ux4 - 8, uy4 - 4, 16, 3);
    // frog 3
    stroke(220, 220, 0);
    strokeWeight(1);
    noFill();
    ellipse(ux3, uy3 + 3, 15, 20);
    noStroke();
    fill(0, 180, 0);
    ellipse(ux3, uy3, r*2, r*2);
    fill(20);
    ellipse(ux3, uy3 - 5, 15, 15);
    fill(0, 180, 0);
    rect(ux3 - 8, uy3 - 5, 16, 8);
    stroke(20);
    strokeWeight(2);
    line(ux3 - 13, uy3 - 5, ux3 + 7, uy3 - 5);
    noStroke();
    fill(20);
    ellipse(ux3 - 4, uy3 - 1, 8, 8);
    ellipse(ux3 + 4, uy3 - 1, 8, 8);
    fill(0, 180, 0);
    rect(ux3 - 8, uy3 - 4, 16, 3);
    // frog 2
    stroke(220, 220, 0);
    strokeWeight(1);
    noFill();
    ellipse(ux2, uy2 + 3, 15, 20);
    noStroke();
    fill(0, 180, 0);
    ellipse(ux2, uy2, r*2, r*2);
    fill(20);
    ellipse(ux2, uy2 - 5, 15, 15);
    fill(0, 180, 0);
    rect(ux2 - 8, uy2 - 5, 16, 8);
    stroke(20);
    strokeWeight(2);
    line(ux2 - 13, uy2 - 5, ux2 + 7, uy2 - 5);
    noStroke();
    fill(20);
    ellipse(ux2 - 4, uy2 - 1, 8, 8);
    ellipse(ux2 + 4, uy2 - 1, 8, 8);
    fill(0, 180, 0);
    rect(ux2 - 8, uy2 - 4, 16, 3);
    if (uy == 75) {
      if (ux >= 0 && ux < 100) {
        if (i1 == false) {
          if (uy2 == 75 && uy3 == 75 && uy4 == 75) {
            ux = 50;
            uy = 75;
          }
          if (uy2 == 75 && uy3 == 75 && uy4 != 75) {
            ux4 = 50;
            uy4 = 75;
          }
          if (uy2 == 75 && uy3 != 75) {
            ux3 = 50;
            uy3 = 75;
          }
          if (uy2 != 75) {
            ux2 = 50;
            uy2 = 75;
          }
          i1 = true;
        }
      }
      if (ux >= 100 && ux < 200) {
        if (i2 == false) {
          if (uy2 == 75 && uy3 == 75 && uy4 == 75) {
            ux = 150;
            uy = 75;
          }
          if (uy2 == 75 && uy3 == 75 && uy4 != 75) {
            ux4 = 150;
            uy4 = 75;
          }
          if (uy2 == 75 && uy3 != 75) {
            ux3 = 150;
            uy3 = 75;
          }
          if (uy2 != 75) {
            ux2 = 150;
            uy2 = 75;
          }
          i2 = true;
        }
      }
      if (ux >= 200 && ux < 300) {
        if (i3 == false) {
          if (uy2 == 75 && uy3 == 75 && uy4 == 75) {
            ux = 250;
            uy = 75;
          }
          if (uy2 == 75 && uy3 == 75 && uy4 != 75) {
            ux4 = 250;
            uy4 = 75;
          }
          if (uy2 == 75 && uy3 != 75) {
            ux3 = 250;
            uy3 = 75;
          }
          if (uy2 != 75) {
            ux2 = 250;
            uy2 = 75;
          }
          i3 = true;
        }
      }
      if (ux >= 300 && ux < 400) {
        if (i4 == false) {
          if (uy2 == 75 && uy3 == 75 && uy4 == 75) {
            ux = 350;
            uy = 75;
          }
          if (uy2 == 75 && uy3 == 75 && uy4 != 75) {
            ux4 = 350;
            uy4 = 75;
          }
          if (uy2 == 75 && uy3 != 75) {
            ux3 = 350;
            uy3 = 75;
          }
          if (uy2 != 75) {
            ux2 = 350;
            uy2 = 75;
          }
          i4 = true;
        }
      }
      if (i1 == true && i2 == true && i3 == true && i4 == true) {
        won = true;
      }
      if (won == false) {
        ux = 200;
        uy = 575;
        b = true;
        if (b == true) {
          m = millis();
        }
        b = false;
      }
    }

    // logs
    l1.run();
    l2.run();

    // turtles
    t1.run();
    t2.run();
    t3.run();
    t5.run();
    t4.run();
    t6.run();

    // coins
    fill(220, 220, 0);
    ellipse(cx1, cy1, cw, 20);
    ellipse(cx2, cy2, cw, 20);
    ellipse(cx3, cy3, cw, 20);
    if (paused == false && dead == false && gameOver == false) {
      cw = cw + cs;
      if ((cw <= 0)||(cw >= 20)) {
        cs = -cs;
      }
    }
    // coin 1
    if (ux == cx1 && uy == cy1) {
      coins = coins + 1;
      cx1 = 500;
    }
    // coin2
    cxx[0] = t1.x;
    cxx[1] = t1.x + 50;
    cxx[2] = t1.x + 100;
    cxx[3] = t1.x + 150;
    cxx[4] = t3.x;
    cxx[5] = t3.x + 50;
    cxx[6] = t4.x;
    cxx[7] = t4.x + 50;
    cxx[8] = t2.x;
    cxx[9] = t2.x + 50;
    cxx[10] = t2.x + 100;
    cxx[11] = t2.x + 150;
    cxx[12] = t5.x;
    cxx[13] = t5.x + 50;
    cxx[14] = t6.x;
    cxx[15] = t6.x + 50;
    cxx[16] = 500;
    cx2 = cxx[rand];
    if (rand < 8) {
      cy2 = 175;
    } else {
      cy2 = 275;
    }
    if (ux >= cx2 - 3 && ux <= cx2 + 3 && uy == cy2) {
      coins = coins + 1;
      rand = 16;
    }
    // coin3
    cxxx[0] = l1.x + 25;
    cxxx[1] = l1.x + 75;
    cxxx[2] = l1.x + 125;
    cxxx[3] = l2.x + 25;
    cxxx[4] = l2.x + 75;
    cxxx[5] = l2.x + 125;
    cxxx[6] = 500;
    cx3 = cxxx[rand2];
    if (rand2 < 3) {
      cy3 = 125;
    } else {
      cy3 = 225;
    }
    if (ux >= cx3 - 4 && ux <= cx3 + 4 && uy == cy3) {
      coins = coins + 1;
      rand2 = 6;
    }

    // user
    if ((millis() - m >= 150 && millis() - m < 300)||(millis() - m >= 450 && millis() - m < 600)||(millis() - m >= 750 && millis() - m < 900)) {
    } else {
      // gold chain
      stroke(220, 220, 0);
      strokeWeight(1);
      noFill();
      ellipse(ux, uy + 3, 15, 20);
      noStroke();
      // body
      fill(0, 180, 0);
      ellipse(ux, uy, r*2, r*2);
      // hat
      fill(20);
      ellipse(ux, uy - 5, 15, 15);
      fill(0, 180, 0);
      rect(ux - 8, uy - 5, 16, 8);
      stroke(20);
      strokeWeight(2);
      line(ux - 13, uy - 5, ux + 7, uy - 5);
      noStroke();
      // shades
      fill(20);
      ellipse(ux - 4, uy - 1, 8, 8);
      ellipse(ux + 4, uy - 1, 8, 8);
      fill(0, 180, 0);
      rect(ux - 8, uy - 4, 16, 3);
    }

    // cars
    c1.run();
    c2.run();
    c3.run();
    c4.run();
    c5.run();
    c6.run();
    c7.run();
    c8.run();

    // lives + coins
    fill(0);
    textFont(font, 25);
    textAlign(LEFT);
    text("LIVES: " + lives, 25, 35);
    text("COINS: " + coins, 225, 35);

    // winning
    if (won == true) {
      winning();
    }

    // death
    if (uy > 100 && uy < 300 && ont == false && onl == false) {
      dead = true;
    }
    if (dead == true) {
      death();
    }

    // gameOver
    if (lives == 0) {
      gameOver = true;
    }
    if (gameOver == true) {
      go();
    }
  }
}

void mousePressed() {
  if (inGame == true && won == false && dead == false && gameOver == false) {
    if (paused == true) {
      paused = false;
    } else {
      paused = true;
    }
  }
  if (inMode == true) {
    if (mouseX > 150 && mouseX < 250 && mouseY > 195 && mouseY < 235) {
      medium = false;
      hard = false;
      easy = true;
    }
    if (mouseX > 125 && mouseX < 275 && mouseY > 275 && mouseY < 315) {
      easy = false;
      hard = false;
      medium = true;
    }
    if (mouseX > 150 && mouseX < 250 && mouseY > 355 && mouseY < 395) {
      easy = false;
      medium = false;
      hard = true;
    }
    if (mouseX > 125 && mouseX < 275 && mouseY > 470 && mouseY < 525) {
      inMode = false;
      inGame = true;
    }
  }
  if (won == true && hard == false) {
    if (mouseX > 75 && mouseX < 125 && mouseY > 450 && mouseY < 485) {
      r2();
      won = false;
    }
    if (mouseX > 265 && mouseX < 335 && mouseY > 450 && mouseY < 485) {
      r2();
      won = false;
      if (medium == true) {
        easy = false;
        medium = false;
        hard = true;
      }
      if (easy == true) {
        easy = false;
        hard = false;
        medium = true;
      }
    }
  }
}

void keyPressed() {
  if (paused == false && dead == false && gameOver == false) {
    if (millis() - m >= 900) {
      if (keyCode == UP) {
        if ((uy > 125)||((uy > 75) && (ux >= 0 && ux < 100 && i1 == false)||(ux >= 100 && ux < 200 && i2 == false)||(ux >= 200 && ux < 300 && i3 == false)||(ux >= 300 && ux < 400 && i4 == false))) {
          uy = uy - s;
        }
      }
      if (keyCode == DOWN && uy < 575) {
        uy = uy + s;
      }
      if ((keyCode == UP)||(keyCode == DOWN)) {
        if (ont == true) {
          ont = false;
        }
        if (onl == true) {
          onl = false;
        }
      }
      if (keyCode == LEFT && ux > 50) {
        ux = ux - s;
        if ((ux == t1.x - 50 + t1.s && uy == t1.y)||(ux == t2.x - 50 + t2.s && uy == t2.y)) {
          ont = false;
          dead = true;
        }
        if ((ux == l1.x - 25 && uy == l1.y + 15)||(ux == l2.x - 25 && uy == l2.y + 15)) {
          onl = false;
          dead = true;
        }
      }
      if (keyCode == RIGHT && ux < width - 50) {
        ux = ux + s;
        if ((ux == t4.x + 100 + t4.s && uy == t4.y)||(ux == t6.x + 100 + t4.s && uy == t6.y)) {
          ont = false;
          dead = true;
        }
        if ((ux == l1.x + 175 && uy == l1.y + 15)||(ux == l2.x + 175 && uy == l2.y + 15)) {
          onl = false;
          dead = true;
        }
      }
    }
  }
  if ((dead == true)||(gameOver == true)) {
    // death
    if (key == ' ') {
      r1();
    }
  }
  if (key == ' ') {
    if (gameOver == true) {
      r2();
      gameOver = false;
    }
  }
}

class car {
  float x, y, s, w, g;
  color f;
  car(float a, float b, color c) {
    x = a;
    g = a;
    y = b;
    f = c;
  }
  void run() {
    noStroke();
    fill(f);
    if (f == color(70, 255, 70)) {
      w = 100;
    } else {
      w = 60;
    }
    if (f == color(70, 255, 70)) {
      if (easy == true) {
        s = -3;
      }
      if (medium == true) {
        s = -5;
      }
      if (hard == true) {
        s = -7;
      }
    }
    if (f == color(255, 255, 100)) {
      if (easy == true) {
        s = 1;
      }
      if (medium == true) {
        s = 2;
      }
      if (hard == true) {
        s = 3.5;
      }
    }
    if (f == color(100, 100, 255)) {
      if (easy == true) {
        s = -2;
      }
      if (medium == true) {
        s = -3;
      }
      if (hard == true) {
        s = -4.5;
      }
    }
    if (f == color(255, 100, 100)) {
      if (easy == true) {
        s = 2.5;
      }
      if (medium == true) {
        s = 4;
      }
      if (hard == true) {
        s = 5.5;
      }
    }
    rect(x, y, w, 30);
    fill(20);
    rect(x + w/8, y - 3, w/6, 3);
    rect(x + 11*w/16, y - 3, w/6, 3);
    rect(x + w/8, y + 30, w/6, 3);
    rect(x + 11*w/16, y + 30, w/6, 3);
    if (paused == false && dead == false && gameOver == false) {
      x = x + s;
    }
    if (s > 0 && x > width) {
      x = -100;
    }
    if (s < 0 && x < -w) {
      x = width;
    }
    // death
    if (y + 15 == uy && ux - r < x + w && ux + r > x) {
      dead = true;
    }
    // reset
    if (reset == true) {
      x = g;
    }
  }
}

class logg {
  float x, y, s, g;
  logg(float a, float b) {
    x = a;
    g = a;
    y = b;
  }
  void run() {
    noStroke();
    fill(125, 80, 80);
    rect(x, y, 150, 30);
    if (easy == true) {
      s = 2;
    }
    if (medium == true) {
      s = 4;
    }
    if (hard == true) {
      s = 6;
    }
    if (paused == false && dead == false && gameOver == false) {
      x = x + s;
    }
    if (x > width) {
      x = -150;
    }
    // on log
    if (y + 15 == uy && ux - r < x + 150 && ux + r > x) {
      onl = true;
      if (ux < x + 50) {
        ux = x + 25;
        if (x + 25 > width + 5) {
          onl = false;
        }
      }
      if (ux >= x + 50 && ux < x + 100) {
        ux = x + 75;
        if (x + 75 > width + 5) {
          onl = false;
        }
      }
      if (ux >= x + 100) {
        ux = x + 125;
        if (x + 125 > width + 5) {
          onl = false;
        }
      }
    }
    // reset
    if (reset == true) {
      x = g;
    }
  }
}

class turtle4 {
  float x, y, s, w, g, time;
  turtle4(float a, float b) {
    x = a;
    g = a;
    y = b;
    w = 15;
    time = 0;
  }
  void run() {
    if (w == 15) {
      // turtle 1
      fill(0, 130, 0);
      rect(x - w - 7, y - 3, 8, 6);
      ellipse(x - w - 9, y, 12, 12);
      fill(0, 80, 0);
      ellipse(x, y, w*2, w*2);
      // turtle 2
      fill(0, 130, 0);
      rect(x + 50 - w - 7, y - 3, 8, 6);
      ellipse(x + 50 - w - 9, y, 12, 12);
      fill(0, 80, 0);
      ellipse(x + 50, y, w*2, w*2);
      // turtle 3
      fill(0, 130, 0);
      rect(x + 100 - w - 7, y - 3, 8, 6);
      ellipse(x + 100 - w - 9, y, 12, 12);
      fill(0, 80, 0);
      ellipse(x + 100, y, w*2, w*2);
      // turtle 4
      fill(0, 130, 0);
      rect(x + 150 - w - 7, y - 3, 8, 6);
      ellipse(x + 150 - w - 9, y, 12, 12);
      fill(0, 80, 0);
      ellipse(x + 150, y, w*2, w*2);
    }
    if (w == 12) {
      // turtle 1
      fill(0, 130, 0);
      rect(x - w - 6, y - 2.5, 7, 5);
      ellipse(x - w - 8, y, 9, 9);
      fill(0, 80, 0);
      ellipse(x, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x - 6, y - 15, x - 3, y - 20, x + 3, y - 20, x + 6, y - 15);
      bezier(x - 6, y + 15, x - 3, y + 20, x + 3, y + 20, x + 6, y + 15);
      noStroke();
      // turtle 2
      fill(0, 130, 0);
      rect(x + 50 - w - 6, y - 2.5, 7, 5);
      ellipse(x + 50 - w - 8, y, 9, 9);
      fill(0, 80, 0);
      ellipse(x + 50, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x + 50 - 6, y - 15, x + 50 - 3, y - 20, x + 50 + 3, y - 20, x + 50 + 6, y - 15);
      bezier(x + 50 - 6, y + 15, x + 50 - 3, y + 20, x + 50 + 3, y + 20, x + 50 + 6, y + 15);
      noStroke();
      // turtle 3
      fill(0, 130, 0);
      rect(x + 100 - w - 6, y - 2.5, 7, 5);
      ellipse(x + 100 - w - 8, y, 9, 9);
      fill(0, 80, 0);
      ellipse(x + 100, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x + 100 - 6, y - 15, x + 100 - 3, y - 20, x + 100 + 3, y - 20, x + 100 + 6, y - 15);
      bezier(x + 100 - 6, y + 15, x + 100 - 3, y + 20, x + 100 + 3, y + 20, x + 100 + 6, y + 15);
      noStroke();
      // turtle 4
      fill(0, 130, 0);
      rect(x + 150 - w - 6, y - 2.5, 7, 5);
      ellipse(x + 150 - w - 8, y, 9, 9);
      fill(0, 80, 0);
      ellipse(x + 150, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x + 150 - 6, y - 15, x + 150 - 3, y - 20, x + 150 + 3, y - 20, x + 150 + 6, y - 15);
      bezier(x + 150 - 6, y + 15, x + 150 - 3, y + 20, x + 150 + 3, y + 20, x + 150 + 6, y + 15);
      noStroke();
    }
    if (w == 5) {
      // turtle 1
      fill(0, 80, 0);
      ellipse(x, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x - 6, y - 11, x - 3, y - 14, x + 3, y - 14, x + 6, y - 11);
      bezier(x - 6, y + 11, x - 3, y + 14, x + 3, y + 14, x + 6, y + 11);
      noStroke();
      // turtle 2
      fill(0, 80, 0);
      ellipse(x + 50, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x + 50 - 6, y - 11, x + 50 - 3, y - 14, x + 50 + 3, y - 14, x + 50 + 6, y - 11);
      bezier(x + 50 - 6, y + 11, x + 50 - 3, y + 14, x + 50 + 3, y + 14, x + 50 + 6, y + 11);
      noStroke();
      // turtle 3
      fill(0, 80, 0);
      ellipse(x + 100, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x + 100 - 6, y - 11, x + 100 - 3, y - 14, x + 100 + 3, y - 14, x + 100 + 6, y - 11);
      bezier(x + 100 - 6, y + 11, x + 100 - 3, y + 14, x + 100 + 3, y + 14, x + 100 + 6, y + 11);
      noStroke();
      // turtle 4
      fill(0, 80, 0);
      ellipse(x + 150, y, w*2, w*2);
      stroke(10);
      strokeWeight(2);
      noFill();
      bezier(x + 150 - 6, y - 11, x + 150 - 3, y - 14, x + 150 + 3, y - 14, x + 150 + 6, y - 11);
      bezier(x + 150 - 6, y + 11, x + 150 - 3, y + 14, x + 150 + 3, y + 14, x + 150 + 6, y + 11);
    }
    // on turtle
    if (w == 0) {
      ont = false;
    }
    if (w != 0 && y == uy && ux - r < x + 150 + 15 && ux + r > x - 15) {
      ont = true;
      if (ux < x + 25) {
        ux = x;
        if (x < -5) {
          ont = false;
        }
      }
      if (ux >= x + 25 && ux < x + 75) {
        ux = x + 50;
        if (x + 50 < -5) {
          ont = false;
        }
      }
      if (ux >= x + 75 && ux < x + 125) {
        ux = x + 100;
        if (x + 100 < -5) {
          ont = false;
        }
      }
      if (ux >= x + 125) {
        ux = x + 150;
        if (x + 150 < -5) {
          ont = false;
        }
      }
    }
    // time + movement
    if (easy == true) {
      s = -1.5;
    }
    if (medium == true) {
      s = -2.5;
    }
    if (hard == true) {
      s = -3.5;
    }
    if (paused == false && dead == false && gameOver == false) {
      x = x + s;
      time = time + 1;
    }
    if (x < -150 - 15) {
      x = width + 15;
    }
    if (time >= 0 && time < 120) {
      w = 15;
    }
    if (time >= 120 && time < 180) {
      w = 12;
    }
    if (time >= 180 && time < 240) {
      w = 5;
    }
    if (time >= 240 && time < 300) {
      w = 0;
    }
    if (time >= 300 && time < 360) {
      w = 5;
    }
    if (time >= 360 && time < 420) {
      w = 12;
    }
    if (time >= 420) {
      time = 0;
    }
    // reset
    if (reset == true) {
      x = g;
      time = 0;
    }
  }
}

class turtle2 {
  float x, y, s, w, g;
  turtle2(float a, float b) {
    x = a;
    g = a;
    y = b;
    w = 15;
  }
  void run() {
    noStroke();
    // turtle 1
    fill(0, 130, 0);
    rect(x - w - 7, y - 3, 8, 6);
    ellipse(x - w - 9, y, 12, 12);
    fill(0, 80, 0);
    ellipse(x, y, w*2, w*2);
    // turtle 2
    fill(0, 130, 0);
    rect(x + 50 - w - 7, y - 3, 8, 6);
    ellipse(x + 50 - w - 9, y, 12, 12);
    fill(0, 80, 0);
    ellipse(x + 50, y, w*2, w*2);
    // on turtle
    if (y == uy && ux - r < x + 50 + w && ux + r > x - 15) {
      ont = true;
      if (ux < x + 25) {
        ux = x;
        if (x < -5) {
          ont = false;
        }
      } else {
        ux = x + 50;
        if (x + 50 < -5) {
          ont = false;
        }
      }
    }
    // movement
    if (easy == true) {
      s = -1.5;
    }
    if (medium == true) {
      s = -2.5;
    }
    if (hard == true) {
      s = -3.5;
    }
    if (paused == false && dead == false && gameOver == false) {
      x = x + s;
    }
    if (x < -150 - w) {
      x = width + w;
    }
    // reset
    if (reset == true) {
      x = g;
    }
  }
}
